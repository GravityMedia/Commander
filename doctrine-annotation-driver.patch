--- a/vendor/doctrine/common/lib/Doctrine/Common/Persistence/Mapping/Driver/AnnotationDriver.php	2016-08-05 15:51:01.780648300 +0200
+++ b/vendor/doctrine/common/lib/Doctrine/Common/Persistence/Mapping/Driver/AnnotationDriver.php	2016-08-05 15:09:53.487415400 +0200
@@ -218,14 +218,10 @@
             );

             foreach ($iterator as $file) {
-                $sourceFile = $file[0];
-
-                if ( ! preg_match('(^phar:)i', $sourceFile)) {
-                    $sourceFile = realpath($sourceFile);
-                }
+                $sourceFile = $this->realpath($file[0]);

                 foreach ($this->excludePaths as $excludePath) {
-                    $exclude = str_replace('\\', '/', realpath($excludePath));
+                    $exclude = str_replace('\\', '/', $this->realpath($excludePath));
                     $current = str_replace('\\', '/', $sourceFile);

                     if (strpos($current, $exclude) !== false) {
@@ -253,4 +249,38 @@

         return $classes;
     }
+
+    /**
+     * Returns the canonicalized absolute pathname. This method is a Phar-safe version
+     * of the builtin `realpath()` function.
+     *
+     * @param string $path
+     *
+     * @return boolean|string
+     */
+    protected function realpath($path)
+    {
+        if ('phar://' !== substr($path, 0, 7)) {
+            return realpath($path);
+        }
+
+        if (!file_exists($path)) {
+            return false;
+        }
+
+        $stack = [];
+        $path = str_replace(['\\', '/'], DIRECTORY_SEPARATOR, substr($path, 7));
+        foreach (explode(DIRECTORY_SEPARATOR, $path) as $folder) {
+            if (0 === strlen($folder) || '.' === $folder) {
+                continue;
+            }
+            if ('..' === $folder) {
+                array_pop($stack);
+            } else {
+                array_push($stack, $folder);
+            }
+        }
+
+        return 'phar://' . implode('/', $stack);
+    }
 }
